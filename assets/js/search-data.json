{
  
    
        "post0": {
            "title": "Safe Reinforcement Learning",
            "content": "Safe Reinforcement Learning . Safe Reinforcement Learning can be defined as the process of learning policies that maximize the expectation of the return in problems in which it is important to ensure reasonable system performance and/or respect safety constraints during the learning and/or deployment processes. . SAC-RCBF . “Safe Model-Based Reinforcement Learning using Robust Control Barrier Functions”. Specifically, an implementation of SAC + Robust Control Barrier Functions (RCBFs) for safe reinforcement learning in two custom environments. . While exploring, an RL agent can take actions that lead the system to unsafe states. Here, we use a differentiable RCBF safety layer that minimially alters (in the least-squares sense) the actions taken by the RL agent to ensure the safety of the agent. . Robust Control Barrier Functions (RCBFs) . In this work, we focus on RCBFs that are formulated with respect to differential inclusions of the following form: . Here D(x) is a disturbance set unkown apriori to the robot, which we learn online during traing via Gaussian Processes (GPs). The underlying library is GPyTorch. . The QP used to ensure the system’s safety is given by: . . where h(x) is the RCBF, and u_RL is the action outputted by the RL policy. As such, the final (safe) action taken in the environment is given by u = u_RL + u_RCBF as shown in the following diagram: . . Coupling RL &amp; RCBFs to Improve Training Performance . The above is sufficient to ensure the safety of the system, however, we would also like to improve the performance of the learning by letting the RCBF layer guide the training. This is achieved via: . Using a differentiable version of the safety layer that allows us to backpropagte through the RCBF based Quadratic Program (QP) resulting in an end-to-end policy. | Using the GPs and the dynamics prior to generate synthetic data (model-based RL). | .",
            "url": "https://tayalmanan28.github.io/my_blogs/reinforcement-learning/robotics/2022/05/02/Safe-Reinforcement-Learning.html",
            "relUrl": "/reinforcement-learning/robotics/2022/05/02/Safe-Reinforcement-Learning.html",
            "date": " • May 2, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Offline Reinforcement Learning",
            "content": "Offline Reinforcement Learning . Offline reinforcement learning requires reconciling two conflicting aims: learning a policy that improves over the behavior policy that collected the dataset, while at the same time minimizing the deviation from the behavior policy so as to avoid errors due to distributional shift. . . This trade-off is critical, because most current offline reinforcement learning methods need to query the value of unseen actions during training to improve the policy, and therefore need to either constrain these actions to be in-distribution, or else regularize their values. We propose an offline RL method that never needs to evaluate actions outside of the dataset, but still enables the learned policy to improve substantially over the best behavior in the data through generalization. The main insight in our work is that, instead of evaluating unseen actions from the latest policy, we can approximate the policy improvement step implicitly by treating the state value function as a random variable, with randomness determined by the action (while still integrating over the dynamics to avoid excessive optimism), and then taking a state conditional upper expectile of this random variable to estimate the value of the best actions in that state. This leverages the generalization capacity of the function approximator to estimate the value of the best available action at a given state without ever directly querying a Q-function with this unseen action. Our algorithm alternates between fitting this upper expectile value function and backing it up into a Q-function. Then, we extract the policy via advantage-weighted behavioral cloning. We dub our method implicit Q-learning (IQL). IQL demonstrates the state-of-the-art performance on D4RL, a standard benchmark for offline reinforcement learning. We also demonstrate that IQL achieves strong performance fine-tuning using online interaction after offline initialization. .",
            "url": "https://tayalmanan28.github.io/my_blogs/reinforcement-learning/robotics/2022/04/01/Offline-Reinforcement-Learning.html",
            "relUrl": "/reinforcement-learning/robotics/2022/04/01/Offline-Reinforcement-Learning.html",
            "date": " • Apr 1, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Tutorial on MuJoCo",
            "content": "Motor . Basic setup .",
            "url": "https://tayalmanan28.github.io/my_blogs/mujoco/simulations/robotics/2022/01/21/MuJoCo.html",
            "relUrl": "/mujoco/simulations/robotics/2022/01/21/MuJoCo.html",
            "date": " • Jan 21, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Optimization for Machine Learning",
            "content": "Motor . Basic setup .",
            "url": "https://tayalmanan28.github.io/my_blogs/optimization/machine-learning/robotics/2021/12/18/Optimization-for-ML.html",
            "relUrl": "/optimization/machine-learning/robotics/2021/12/18/Optimization-for-ML.html",
            "date": " • Dec 18, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Probability and Stochastics",
            "content": "Motor . Basic setup .",
            "url": "https://tayalmanan28.github.io/my_blogs/probability/stochastics/robotics/2021/10/03/probability-and-stochastics.html",
            "relUrl": "/probability/stochastics/robotics/2021/10/03/probability-and-stochastics.html",
            "date": " • Oct 3, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Tutorial on Control Theory",
            "content": "Motor . Basic setup .",
            "url": "https://tayalmanan28.github.io/my_blogs/pybullet/robotics/2021/01/13/Tutorial-on-control-theory.html",
            "relUrl": "/pybullet/robotics/2021/01/13/Tutorial-on-control-theory.html",
            "date": " • Jan 13, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Reinforcement Learning",
            "content": "Motor . Basic setup .",
            "url": "https://tayalmanan28.github.io/my_blogs/reinforcement-learning/robotics/2020/08/23/reinforcement-learning.html",
            "relUrl": "/reinforcement-learning/robotics/2020/08/23/reinforcement-learning.html",
            "date": " • Aug 23, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Tutorial on Pybullet",
            "content": "Motor . Basic setup .",
            "url": "https://tayalmanan28.github.io/my_blogs/pybullet/robotics/2020/05/16/Tutorial-on-Pybullet.html",
            "relUrl": "/pybullet/robotics/2020/05/16/Tutorial-on-Pybullet.html",
            "date": " • May 16, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "3D Printing",
            "content": "3D Printing . Basic setup .",
            "url": "https://tayalmanan28.github.io/my_blogs/3d-printing/robotics/2019/12/22/3D-Printing.html",
            "relUrl": "/3d-printing/robotics/2019/12/22/3D-Printing.html",
            "date": " • Dec 22, 2019"
        }
        
    
  
    
        ,"post9": {
            "title": "How to Choose Batteries",
            "content": "Batteries . Basic setup .",
            "url": "https://tayalmanan28.github.io/my_blogs/battery/robotics/2019/11/19/how-to-choose-batteries.html",
            "relUrl": "/battery/robotics/2019/11/19/how-to-choose-batteries.html",
            "date": " • Nov 19, 2019"
        }
        
    
  
    
        ,"post10": {
            "title": "How to Choose Motors",
            "content": "How Motors Work and How to Choose the Right Motor . Motors can be found practically everywhere. This guide will help you learn the basics of electric motors, available types and how to choose the correct motor. The basic questions to answer while deciding which motor is most appropriate for an application are which type should I choose and which specifications matter. . How do motors work? . Electric motors work by converting electrical energy to mechanical energy in order to create motion. Force is generated within the motor through the interaction between a magnetic field and winding alternating (AC) or direct (DC) current. As the strength of a current increases so does the strength of the magnetic field. Keep Ohm’s law (V = I*R) in mind; voltage must increase in order to maintain the same current as resistance increases. . Electric Motors have an array of applications. Conventional industrial uses include blowers, machine and power tools, fans and pumps. Hobbyists generally use motors in smaller applications requiring movement such as robotics or modules with wheels. Types of motors: There are many types of DC motors, but the most common are brushed or brushless. There are also vibrating motors, stepper motors, and servo motors. . DC Brush Motors . DC brush motors are one of the most simple and are found in many appliances, toys, and automobiles. They use contact brushes that connect with a commutator to alter current direction. They are inexpensive to produce and simple to control and have excellent torque at low speeds (measured in revolutions per minute or RPM). A few downsides are that they require constant maintenance to replace worn out brushes, have limited in speed due to brush heating, and can generate electromagnetic noise from brush arcing. . Brushless DC Motors . Brushless DC motors use permanent magnets in their rotor assembly. They are popular in the hobby market for aircraft and ground vehicle applications. They are more efficient, require less maintenance, generate less noise, and have higher power density than brushed DC motors. They can also be mass-produced and resemble an AC motor with a constant RPM, except powered by DC current. There are a few disadvantages however, which include that they are difficult to control without a specialized regulator and they require low starting loads and specialized gearboxes in drive applications causing them to have a higher capital cost, complexity, and environmental limitations. . Vibrating Motors . Vibrating motors are used for applications requiring vibration such as cell phones or game controllers. They are generated by an electric motor and have an unbalanced mass on the drive shaft which causes the vibration. They can also be used in non-electronic buzzers that vibrate for the purpose of sound or for alarms or door bells. . Stepper Motor . Whenever precise positioning is involved, stepper motors are your friend. They’re found in printers, machine tools, and process control systems and are built for high-holding torque that gives the user the ability to move from one step to the next. They have a controller system that designates the position through signal pulses sent to a driver, which interprets them and sends proportional voltage to the motor. They are relatively simple to make and control, but they draw maximum current constantly. Small step distance limits top speed and steps can be skipped at high loads. . Servo Motor . Servo motors are another popular hobby market motor and are used for position control without precision. Their popular applications include remote control applications like RC toy vehicles and robotics. They consist of a motor, potentiometer, and a control circuit and are mostly controlled through pulse width modulation (PWM), through the sending of electrical pulses to the control wire. Servos can be either AC or DC. AC servos can handle higher current surges and are used for industrial machinery, whereas DC servos are for smaller hobbyist applications. To learn more about servos check out our How Servo Motors Work article. . AC Motors . There are three basic types of AC motors: induction, synchronous, and industrial. . Induction Motor . Induction motors are referred to as asynchronous motors, since they do not move at the same constant rate or turn slower than the frequency supplied. Slip, the difference between actual and synchronous speed, is needed to produce torque, the twisting force that causes rotation, in induction motors. The magnetic field that surrounds the rotor of these motors is caused by induced current. . Synchronus Motor . The rotor of synchronous motors spins at a constant rate as AC is supplied. Their magnetic field is created by permanent magnets. Industrial motors are designed for three-phase, high power applications such as conveyers or blowers. AC motors can also be found in home appliances and other applications such as clocks, fans, and disk drives. . What to consider when purchasing a motor: . There are several characteristics that you need pay attention to when selecting a motor but voltage, current, torque, and velocity (RPM) are most important. . Current is what powers the motor and too much current will damage the motor. For DC motors, operating and stall current are important. Operating current is the average amount of current the motor is expected to draw under typical torque. Stall current applies enough torque for the motor to run at stall speed, or 0RPM. This is the maximum amount of current the motor should be able to draw, as well as the maximum power when multiplied by the rated voltage. Heat sinks are important are constantly running the motor or are running it at higher than the rated voltage in order to keep the coils from melting. . | Voltage is used to keep net current flowing in one direction and to overcome back current. The higher the voltage, the higher the torque. The voltage rating of a DC motor indicates the most efficient voltage while running. Be sure to apply the recommended voltage. If you apply too few volts, the motor will not work, whereas too many volts can short windings resulting in power loss or complete destruction. . | Operating and stall values also need to be considered with torque. Operating torque is the amount of torque the motor was designed to give and stall torque is the amount of torque produced when power is applied from stall speed. You should always look at the required operating torque, but some applications will require you to know how far you can push the motor. For example, with a wheeled robot, good torque equals good acceleration but you must make sure the stall torque is strong enough to lift the weight of the robot. In this instance, torque is more important than speed. . | Velocity, or speed (RPM), can be complex regarding motors. The general rule is that motors run most efficiently at the highest speeds but it is not always possible if gearing is required. Adding gears will reduce the efficiency of the motor, so take into account speed and torque reduction as well. . | . These are the basics to consider while selecting a motor. Consider an application’s purpose and which current it uses to select the appropriate type of motor. An application’s specifications such as voltage, current, torque, and velocity will determine which motor is most appropriate so be sure to pay attention to its requirements. .",
            "url": "https://tayalmanan28.github.io/my_blogs/motor/robotics/2019/09/21/how-to-choose-motors.html",
            "relUrl": "/motor/robotics/2019/09/21/how-to-choose-motors.html",
            "date": " • Sep 21, 2019"
        }
        
    
  

  
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tayalmanan28.github.io/my_blogs/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}